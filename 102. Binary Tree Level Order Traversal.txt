/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        // BFS 
        List<List<Integer>> result = new ArrayList<>();
        if (root == null)  return result;
        
        Queue<TreeNode> queue = new LinkedList<>();  // create a queue to hold nodes
        queue.offer(root);           
        
        while (!queue.isEmpty()){
            int size = queue.size();
            ArrayList<Integer> temp = new ArrayList<>();
            while (size > 0){
                TreeNode node = queue.poll();   // get current node
                temp.add(node.val);            // add current value into temp list
                
                if (node.left != null){    // append left child
                    queue.offer(node.left);
                }
                
                if (node.right != null){    // append right child
                    queue.offer(node.right);
                } 
                size--;
            }
            result.add(temp);  // add temp list into result
        }
        
        return result;
    }
}

//     3
//    / \
//   9  20
//     /  \
//    15   7
        
// [
//   [3],
//   [9,20],
//   [15,7]
// ]