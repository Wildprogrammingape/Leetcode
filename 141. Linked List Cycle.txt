# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        fast = head
        slow = head
        while fast and fast.next:      # ** 'NoneType' object has no attribute 'next'
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True   
        return False
        
# Note 1:  WHY "while fast and fast.next:"?
# if we use .next, we hava to notice None has no next. So "fast.next" is not None, thus "fast" is not None.
# let's say 1-2-3-4-5, if fast.next is illegal, fast must be None, so fast is ahead of fast.next

# Note 2: what if slow goes over fast?
# it can be proved: n = m.p (n is the step that fast and slow meet, p is period of cycle, m is integer)

# Note 3: what about cycle is not the end?
# it can't happen, since a node can't have two links. So cycle is always from the tail lol.