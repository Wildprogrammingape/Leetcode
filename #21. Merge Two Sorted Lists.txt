/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        // construct a dummy head, add a pointer to it
        // cheack corner case, compare the value 
        
        // while loop, if l1 or l2 is null, connect and break
        
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        
        while (true){
            if (l1 == null && l2 == null){
                break;
            }
            else if (l1 == null && l2 != null){
                cur.next = l2;
                break;
            }
            else if (l2 == null && l1 != null){
                cur.next = l1;
                break;
            }
            else{
                if (l1.val < l2.val){
                    ListNode node = new ListNode(l1.val);
                    cur.next = node;
                    cur = cur.next;
                    l1 = l1.next;
                }
                else{
                    ListNode node = new ListNode(l2.val);
                    cur.next = node;
                    cur = cur.next;
                    l2 = l2.next;
                }
            }
        }
        
        return dummy.next;
    }
}

// Time complexity: O(n)
// Space complexity: O(n)