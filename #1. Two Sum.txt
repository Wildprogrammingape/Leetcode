class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        // HashMap {number, index}
        // for index i, search complement number(key) in exsisting hashmap, find complement index
        
        Map<Integer, Integer> hashmap = new HashMap<>();
        
        for (int i=0; i<nums.length; i++){
            
            int complement = target - nums[i];
            
            if (hashmap.containsKey(complement)){
                return new int[] {hashmap.get(complement), i};
            }
            else{
                hashmap.put(nums[i], i);
            }
        }
        
        throw new IllegalArgumentException("No answer returned");
    }
}

// Time complexity: O(n). we only have to traverse the list once containing n elements.
// hashmap.get() method only takes O(1) time

// Space complexity: O(n).  It depends on the space on hashmap, may need store n elements.







//         // Brute force
        
//         for (int i=0; i<nums.length-1; i++){
//             for (int j=i+1; j<nums.length; j++){
//                 if (nums[i] + nums[j] == target){
//                     return new int[] {i,j};
//                 }
//             }
//         }
        
//         throw new IllegalArgumentException("No answer returned"); // must have return type

// Time complexity: O(n*n). double for loop
// Space complexity: O(1). don't need extra space.