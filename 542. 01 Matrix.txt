class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        
        int[][] mark = new int[matrix.length][matrix[0].length];
        // *create a 2d array "mark", in case the dfs endless loop
        
        for (int i=0; i<matrix.length; i++){
            for (int j=0; j<matrix[0].length; j++){
                matrix[i][j] = dfs(matrix, i, j, mark);
            }
        }
        
        return matrix;
    }
    
    public int dfs(int [][] matrix, int i, int j, int[][] mark){
        
        if (i<0 || i>=matrix.length || j<0 || j>=matrix[0].length || mark[i][j] == 1){
            
            return 100000;         
            
//Integer.MAX_VALUE not passed, so I guess stack overflow, since there might be(Integer.MAX_VALUE + 1...)
        }
        
        if (matrix[i][j] == 0){
            return 0;
        }
        
        // determine neighbour to reduce time complexity
        if (i-1 >= 0 && matrix[i-1][j] == 0)                return 1;
        if (i+1 < matrix.length && matrix[i+1][j] == 0)     return 1;
        if (j-1 >= 0 && matrix[i][j-1] == 0)                return 1;
        if (j+1 < matrix[0].length && matrix[i][j+1] == 0)  return 1;
        
        
        mark[i][j] = 1;   // *mark the current number before dfs
        
        int up = 1 + dfs(matrix, i, j+1, mark);
        int down = 1 + dfs(matrix, i, j-1, mark);
        int left = 1+ dfs(matrix, i-1, j, mark);
        int right = 1+ dfs(matrix, i+1, j, mark);
        
        mark[i][j] = 0;    // *reset to any number except 1
        
        return Math.min(Math.min(up, down), Math.min(left, right));
        
        // return 1+ Math.min(Math.min(dfs(matrix, i+1, j), dfs(matrix, i-1, j)), Math.min(dfs(matrix, i, j+1), dfs(matrix, i, j-1)));
    }
}

// [[0,0,0],
//  [0,1,0],
//  [1,1,1]]