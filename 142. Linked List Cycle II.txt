/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if (fast == slow){  // catch first, set slow to start
                slow = head;
                while(fast != slow){   // fast and slow moves with one step
                    fast = fast.next;
                    slow = slow.next;
                }
                return slow;    // catch secondly, current node is cycle
            }
        }
        return null;
        
    }
}

// basically when fast catches slow firstly, then we set slow from beginning, and keep fast unchanged, move slow and fast with one step, the current node is the cycle.