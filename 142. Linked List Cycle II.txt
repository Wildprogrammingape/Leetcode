# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        # determine if there is a cycle
        slow = head
        fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if fast == slow: # set slow to start, loop fast and slow with one step
                slow = head
                while slow != fast:
                    slow = slow.next
                    fast = fast.next
                return slow          # slow catches fast, so the current node is cycle start
            
        return None