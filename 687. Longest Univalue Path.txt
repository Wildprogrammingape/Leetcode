# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def longestUnivaluePath(self, root: TreeNode) -> int:
        self.length = 0
        self.dfs(root)
        return self.length
    
    
    def dfs(self,root):
        if not root:
            return 0
        
        left = self.dfs(root.left) if root.left else -1        # Grammar more clear
        right = self.dfs(root.right) if root.right else -1
        
        path_left = left + 1 if left >= 0 and root.val == root.left.val else 0
        path_right = right + 1 if right >= 0 and root.val == root.right.val else 0
        
        # .val is used, so None case has to be considered

            
        self.length = max(self.length, path_left + path_right)
        
        return max(path_left,path_right)
        
        
#         if root.left is not None:
#             left = self.dfs(root.left)
#         else:
#             left = -1
            
#         if root.right is not None:
#             right = self.dfs(root.right)
#         else:
#             right = -1
            
#         if left >= 0 and root.val == root.left.val:
#             path_left = left + 1
#         else:
#             path_left = 0
        
#         if  right >= 0 and root.val == root.right.val:
#             path_right = right + 1
#         else:
#             path_right = 0       