/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        // Similar to 94 Binary Tree Inorder Traversal (template)
        
        Stack<TreeNode> stack = new Stack<>();
        TreeNode pre = null;                    // use pre to record last traversed node
        if (root == null)  return true;
        
        while (root != null || !stack.isEmpty()){
            while (root != null){
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if (pre != null && root.val<=pre.val) return false;
            
            pre = root;         // update pre
            root = root.right;  // upadte current root
            
        }
        return true;
        
    }
}