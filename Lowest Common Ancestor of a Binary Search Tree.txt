# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        # if p<q<node.val -- in the left subtree
        # if node.val>p>q -- in the right subtree
        # if p<node.val<q -- return the node itself
        
        pointer = root
        while pointer:
            if p.val < pointer.val and q.val < pointer.val:
                pointer = pointer.left
            elif pointer.val > p.val and pointer.val > q.val:
                pointer = pointer.right
            # elif p.val<= pointer.val <=q.val:
            else:
                return pointer
        
        
        
        # p=3, q=5
        # binary search tree definition:The left subtree of a node contains only nodes with keys lesser than the node¡¯s key.
        #The right subtree of a node contains only nodes with keys greater than the node¡¯s key.
        #The left and right subtree each must also be a binary search tree.