/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        // slow and fast catch first
        // set slow to begin, then both of them move one step, end at cycle node
        
        ListNode slow = head;
        ListNode fast = head;
        
        while (fast != null && fast.next != null){
            
            slow = slow.next;
            fast = fast.next.next;
            
            if (slow == fast){  // catch firstly, set slow to begin
                slow = head;
                while (slow != fast){  // there is cycle, catch secondly to get the node
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow;
            }
        }
        
        return null;
        
    }
}

// Time complexty: O(n)
// Space complexity: O(1)

// basically when fast catches slow firstly, then we set slow from beginning, and keep fast unchanged, move slow and fast with one step, the current node is the cycle.