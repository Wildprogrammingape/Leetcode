/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if (root == null) return new TreeNode(val);
        helper(root, val);
        return root;
    }
    
//     public void helper(TreeNode root, int val){
//         if (root == null) return;
        
//         // meet the requirements
//         if (root.val > val && root.left == null){
//             root.left = new TreeNode(val);
//             return;
//         }
//         if (root.val < val && root.right == null){
//             root.right = new TreeNode(val);
//             return;
//         }
        
//         // continue to traverse children
//         if (root.val > val)  helper(root.left, val);
//         else                 helper(root.right, val);
        
//     }
    
    public void helper(TreeNode root, int val){
        // write it in more elegant way
        if (root.val > val && root.left == null){
            root.left = new TreeNode(val);
        }
        else if (root.val < val && root.right == null){
            root.right = new TreeNode(val);
        }
        else if (root.val > val){
            helper(root.left, val);
        }
        else{
            helper(root.right, val);
        }
        
    }
}

// Given the tree:
//         4
//        / \
//       2   7
//      / \
//     1   3
// And the value to insert: 5