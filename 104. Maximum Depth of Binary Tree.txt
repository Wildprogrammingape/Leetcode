# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if root is None:    # for node which is not None, max(leftchild,rightchild) + 1
            return 0
        
        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1
    
    
    
    
    
    '''
    def maxDepth(self, root: TreeNode) -> int:
        if root == None:
            depth = 0
        else:
            depth = 1
       
        if self.leafRecursion(root.left, root.right, depth) is True:
             return depth 
          
    def leafRecursion(self, left, right, i ):
        
        if left is None and right is None:
            
            return True
        
        i += 1
        
        if left is not None and right is None:
            
            return self.leafRecursion(left.left, left.right,i)
        
        if left is None and right is not None:
            
            return self.leafRecursion(right.left, right.right,i)
          
        return self.leafRecursion(left.left, left.right,i) and self.leafRecursion(right.left, right.right,i)
       ''' 
