/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        // bfs
        
        List<List<Integer>> result = new ArrayList<>();  // nested list to hold the final result
        if (root == null) return result;
        
        Queue<Node> queue = new LinkedList<>();         // created a queue to hold temp Node
        queue.offer(root);
        
        while (!queue.isEmpty()){
            int size = queue.size();
            List<Integer> tempList = new ArrayList<>();
            while(size > 0){
                // poll node from queue and add into tempList
                Node tempNode = queue.poll();
                tempList.add(tempNode.val);
                
                // add its related children
                for (Node node : tempNode.children){
                    if (node != null){
                        queue.offer(node);
                    }
                }
                
                size--;
            }
            
            result.add(tempList);
        }
        
        return result;
    }
}

// Input: root = [1,null,3,2,4,null,5,6]
// Output: [[1],[3,2,4],[5,6]]