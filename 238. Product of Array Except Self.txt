class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        # we can create two list called L (left) and R (right) to calculate the product to the left except self, and product to the right except self.
        # Finally, the product except self means: (to left) * (to right)
        
        # First, create the two lists
        left = len(nums) * [0]
        right = len(nums) * [0]
        
        # formulate "to left" list
        # there is no left value on the first number in nums, set as 1
        left[0] = 1
        
        for i in range(1,len(nums)):
            left[i] = left[i-1] * nums[i-1]
        
        
        # formulate "to right" list
        # there is no right value on the final number in nums, set as 1
        right[len(nums)-1] = 1
        for i in range(len(nums)-2,-1,-1):
            right[i] = right[i+1] * nums[i+1]
        
        # finally, multiple left and right to get the result
        # note:  list = [], list[0] = 1 --  Index out of range !
        result = []
        for i in range(0,len(nums)):
            result.append(left[i] * right[i])
            
        return result
        
        
        
#         length = len(nums)
        
#         L, R, result = [0]*length, [0]*length, [0]*length
        
#         L[0] = 1
#         for i in range(1,length):
#             L[i] = nums[i-1] * L[i-1]
        
#         R[length - 1] = 1
#         for i in range(length-2,-1,-1):
#             R[i] = nums[i+1] * R[i+1]
            
#         for i in range(0,length):
#             result[i] = L[i] * R[i]
            
#         return result
        
        
        '''
        # type(1/1) -- float
        
        if not nums:
            return []
        
        all_product = 1
        for i in nums:
            all_product = all_product * i
        result = []     
        # edge case
        if all_product == 0:
            for num in nums:
                temp = nums
                temp.remove(num)
                result.append(self.all_value_product(temp))
            return result
        
        
            
        for item in nums:
            result.append(int(all_product / item))   # case : item = 0
        
        return result
    
    # helper function to accelerate all product in temp list
    def all_value_product(self, l):
        product = 1
        for n in l:
            product = product * n
                
        return product
        '''