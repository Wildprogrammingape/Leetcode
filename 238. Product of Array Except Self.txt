class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        // corner case
        if (nums == null)  return null;
        
        int leftPro = 1, rightPro = 1;
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = 1;
        right[n-1] = 1;
        
        int[] result = new int[n];
        
        // left max array
        for (int i=1; i<n; i++){
            leftPro *= nums[i-1] ;
            left[i] = leftPro;
        }
        
        // right max array
        for (int i=n-2; i>=0; i--){
            rightPro *= nums[i+1];
            right[i] = rightPro;
        }
        
        // calculate final result
        for (int i=0; i<n; i++){
            result[i] = left[i] * right[i];
        }
        
        return result;
    }
}
// time: O(n)
// space: O(n)

// [1,1,2,6]
// [24,12,4,1]