# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        # Traditional divide and conquer
        
        # Edge/condition
        if not root:                            # root is None
            return None
        if root == p or root == q:              # find the tree
            return root
        
        # Divide
        left = self.lowestCommonAncestor(root.left,p,q)
        right = self.lowestCommonAncestor(root.right,p,q)
        
        # Conquer
        if left and right:  # left is not None, right is not None
            return root
        if not left:        # right is XX, but left is None
            return right
        if not right:       # left is XX, but right is None
            return left
        
        
        
        
        '''
        # Accepted, but time limit exceeded
        while root:
        
            if root.val == q.val:
                return q
            if root.val == p.val:
                return p
            if (root.left == p and root.right == q) or  (root.left == q and root.right == p):
                return root
        
            self.lowestCommonAncestor(root.left,p,q)
            self.lowestCommonAncestor(root.right,p,q)
        '''