# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if s is None and t is None:
            return True
        if s is None or t is None:
            return False
        
        return self.Sametree(s,t) or self.isSubtree(s.left,t) or self.isSubtree(s.right,t)
        # Good implementation : return funtion1 or fuction2
           
    def Sametree(self,tree1,tree2):
        if tree1 == None and tree2 == None:
            return True
        if tree1 is None or tree2 is None:
            return False
        return tree1.val == tree2.val and self.Sametree(tree1.left,tree2.left) and self.Sametree(tree1.right,tree2.right)    
    
    
        '''
        if s is None and t is None:
            return True
        if s is None or t is None:
            return False
       
        if s.val == t.val:  # exclude case: s= [1,1]  ,  t = [1]
            # with two same values chidren, switch
            return self.Sametree(s,t)
        
        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)
    
    def Sametree(self,tree1,tree2):
        if tree1 == None and tree2 == None:
            return True
        if tree1 is None or tree2 is None:
            return False
        return tree1.val == tree2.val and self.Sametree(tree1.left,tree2.left) and self.Sametree(tree1.right,tree2.right)
        '''