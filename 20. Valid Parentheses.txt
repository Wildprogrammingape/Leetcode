class Solution {
    public boolean isValid(String s) {
        // This is a maple Stack question
        
        Stack<Character> stack = new Stack<>();  // create a stack
        
        // now we need to loop through all characters in s
        // .toCharArray()  method -- array with single character
        
        char[] charArray = s.toCharArray();
        
        for (char c : charArray){
            if (c == '(' || c == '{' || c == '['){    // push all opening brackets
                stack.push(c);
            }
            
            else if (!stack.isEmpty() && stack.peek() == '(' && c == ')'){ // fit properly
                stack.pop();
            }
            
            else if (!stack.isEmpty() && stack.peek() == '[' && c == ']'){ // fit properly
                stack.pop();
            }
            
            else if (!stack.isEmpty() && stack.peek() == '{' && c == '}'){ // fit properly
                stack.pop();
            }
            
            else{
                return false;   // not fit, or come across closing brakets at first
            }
        }
    
        return stack.isEmpty();      
    }
}