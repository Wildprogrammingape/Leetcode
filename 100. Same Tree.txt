# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        # Recursion Solution
        if p is None and q is None:                                       # All None
            return True
        
        if p is not None and q is not None:                               # All not None
            return p.val == q.val and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)
        
        return False                                              # one of the Node is None
             

        
        
        
'''
class BinaryTree(object):        # Definition for root
    def __init__(self,root):
        self.root = TreeNode(root)       # convenient to refer root.XX in the following

class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        
        tree1 = BinaryTree(p.val)
        tree2 = BinaryTree(q.val)
    
        if tree1.root.val == tree2.root.val:
            if tree1.root.left == tree2.root.left:  # something wrong with None
                if tree1.root.right == tree2.root.right:
                    return True
        return False
        
'''        
